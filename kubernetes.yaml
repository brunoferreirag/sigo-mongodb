---
apiVersion: v1
kind: Secret
metadata:
  name: sigo-mongo
type: Opaque
data:
  MONGO_ROOT_USERNAME: YWRtaW4K
  MONGO_ROOT_PASSWORD: cGFzc3dvcmQK
  MONGO_USERNAME: dHJhaW5pbmcK
  MONGO_PASSWORD: cGFzc3dvcmQK
  MONGO_USERS_LIST: dHJhaW5pbmc6ZGJBZG1pbixyZWFkV3JpdGU6cGFzc3dvcmQK
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sigo-mongo
data:
  ensure-users.js: |
    const targetDbStr = 'gestao-norma-industrial';
    const rootUser = cat('/etc/sigo-mongo/admin/MONGO_ROOT_USERNAME');
    const rootPass = cat('/etc/sigo-mongo/admin/MONGO_ROOT_PASSWORD');
    const usersStr = cat('/etc/sigo-mongo/MONGO_USERS_LIST');

    // auth against admin
    const adminDb = db.getSiblingDB('admin');
    adminDb.auth(rootUser, rootPass);
    print('Successfully authenticated admin user');

    // we'll create the users here
    const targetDb = db.getSiblingDB(targetDbStr);

    // user-defined roles should be stored in the admin db
    const customRoles = adminDb
      .getRoles({rolesInfo: 1, showBuiltinRoles: false})
      .map(role => role.role)
      .filter(Boolean);

    // parse the list of users, and create each user as needed
    usersStr
      .trim()
      .split(';')
      .map(s => s.split(':'))
      .forEach(user => {
        const username = user[0];
        const rolesStr = user[1];
        const password = user[2];

        if (!rolesStr || !password) {
          return;
        }

        const roles = rolesStr.split(',');
        const userDoc = {
          user: username,
          pwd: password,
        };

        userDoc.roles = roles.map(role => {
          if (!~customRoles.indexOf(role)) {
            // is this a user defined role?
            return role; // no, it is built-in, just use the role name
          }
          return {role: role, db: 'admin'}; // yes, user-defined, specify the long format
        });

        try {
          targetDb.createUser(userDoc);
        } catch (err) {
          if (!~err.message.toLowerCase().indexOf('duplicate')) {
            // if not a duplicate user
            throw err; // rethrow
          }
        }
      });
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: mongodb-standalone
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
---
apiVersion: v1
kind: PersistentVolume
metadata:
    name: mongodb-standalone
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: mongodb-standalone
  local:
    path: /sigo-mongo
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
            - sigo-mongo
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: sigo-mongo
spec:
  storageClassName: sigo-mongo
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sigo-mongo
spec:
  serviceName: sigo-mongo
  replicas: 1
  selector:
    matchLabels:
      app: sigo-mongo
  template:
    metadata:
      labels:
        app: sigo-mongo
        selector: sigo-mongo
    spec:
      containers:
      - name: sigo-mongo
        image: mongo:4.0.8
        env:
          - name: MONGO_INITDB_ROOT_USERNAME_FILE
            value: /etc/sigo-mongo/admin/MONGO_ROOT_USERNAME
          - name: MONGO_INITDB_ROOT_PASSWORD_FILE
            value: /etc/sigo-mongo/admin/MONGO_ROOT_PASSWORD
        volumeMounts:
        - name: sigo-mongo
          mountPath: /etc/sigo-mongo
          readOnly: true
      volumes:
      - name: sigo-mongo
        secret:
          secretName: sigo-mongo
          items:
          - key: MONGO_ROOT_USERNAME
            path: admin/MONGO_ROOT_USERNAME
          - key: MONGO_ROOT_PASSWORD
            path: admin/MONGO_ROOT_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: sigo-mongo
  labels:
    app: sigo-mongo
spec:
  clusterIP: None
  selector:
    app: sigo-mongo
---
